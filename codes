Exp 14 portfolio
Sudo apt-get update -y
Sudo apt install docker.io
sudo systemctl stop docker
sudo docker build -t server .
sudo docker images
sudo docker run -d -p 80:80 server
sudo systemctl start docker
sudo systemctl enable docker


Exp 15 DynamoDB-S3-Lambda code
import boto3
from uuid import uuid4

def lambda_handler(event, context):
    s3 = boto3.client("s3")
    dynamodb = boto3.resource('dynamodb')
    
    for record in event['Records']:
        bucket_name = record['s3']['bucket']['name']
        object_key = record['s3']['object']['key']
        size = record['s3']['object'].get('size', -1)
        event_name = record['eventName']
        event_time = record['eventTime']
        
        dynamoTable = dynamodb.Table('newtable')
        dynamoTable.put_item(
            Item={
                'unique': str(uuid4()), 
                'Bucket': bucket_name, 
                'Object': object_key,
                'Size': size, 
                'Event': event_name, 
                'EventTime': event_time
            }
        )



Exp 18 SQS
access policy code
{
    "Version": "2012-10-17",
    "Id": "example-ID",
    "Statement": [
        {
            "Sid": "example-statement-ID",
            "Effect": "Allow",
            "Principal": {
                "Service": "s3.amazonaws.com"
            },
            "Action": [
                "SQS:SendMessage"
            ],
            "Resource": "arn:aws:sqs:Region:account-id:queue-name",
            "Condition": {
                "ArnLike": {
                    "aws:SourceArn": "arn:aws:s3:*:*:awsexamplebucket1"
                },
                "StringEquals": {
                    "aws:SourceAccount": "bucket-owner-account-id"
                }
            }
        }
    ]
}

